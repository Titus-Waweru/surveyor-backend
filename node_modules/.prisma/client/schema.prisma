// Prisma generator
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// PostgreSQL datasource
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================
// User Model
// ===========================
model User {
  id                   Int     @id @default(autoincrement())
  name                 String
  email                String  @unique
  password             String
  phoneNumber          String?
  notificationsEnabled Boolean @default(true)
  profileImageUrl      String?
  role                 String
  status               String  @default("pending")
  iskNumber            String?
  idCardUrl            String?
  certUrl              String?
  otp                  String?
  paid                 Boolean @default(false)

  // Reset‑password fields
  resetToken       String?
  resetTokenExpiry DateTime?

  // Relations
  bookings             Booking[]
  surveyorBookings     Booking[]       @relation("SurveyorBookings")
  gisAssignments       GisAssignment[] @relation("UserGisAssignments")
  gisExpertAssignments GisAssignment[] @relation("GisExpertAssignments")
  reviews              Review[]
}

// ===========================
// Booking Model  (UPDATED)
// ===========================
model Booking {
  id            Int      @id @default(autoincrement())
  location      String
  surveyType    String
  description   String
  preferredDate DateTime
  status        String   @default("Pending")
  createdAt     DateTime @default(now())

  latitude  Float?
  longitude Float?

  // Relation to client user
  userId Int
  user   User @relation(fields: [userId], references: [id])

  // Optional relation to surveyor user
  assignedSurveyorId Int?
  assignedSurveyor   User? @relation("SurveyorBookings", fields: [assignedSurveyorId], references: [id])

  // NEW ⬇️ Payments linked to this booking
  payments Payment[]

  // Reviews
  reviews Review[]
}

// ===========================
// DemoBooking Model
// ===========================
model DemoBooking {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  company   String?
  phone     String?
  date      DateTime
  createdAt DateTime @default(now())
}

// ===========================
// Payment Model  (UPDATED)
// ===========================
model Payment {
  id        String   @id @default(cuid())
  email     String
  amount    Int
  method    String
  status    String
  reference String
  createdAt DateTime @default(now())

  // NEW ⬇️ Link payment to a booking (optional so standalone payments still work)
  bookingId Int?
  booking   Booking? @relation(fields: [bookingId], references: [id])
}

// ===========================
// GIS Assignment Model
// ===========================
model GisAssignment {
  id          Int      @id @default(autoincrement())
  location    String
  description String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())

  userId Int
  user   User @relation("UserGisAssignments", fields: [userId], references: [id])

  assignedGisExpertId Int?
  assignedGisExpert   User? @relation("GisExpertAssignments", fields: [assignedGisExpertId], references: [id])
}

// ===========================
// Review Model
// ===========================
model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      @default(5)
  comment   String
  createdAt DateTime @default(now())

  // Relations
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  bookingId Int
  booking   Booking @relation(fields: [bookingId], references: [id])
}
