// Prisma generator
generator client {
  provider = "prisma-client-js"
}

// PostgreSQL datasource
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================
// User Model
// ===========================
model User {
  id                   Int     @id @default(autoincrement())
  name                 String
  email                String  @unique
  password             String
  phoneNumber          String? // Optional phone number
  notificationsEnabled Boolean @default(true)
  profileImageUrl      String? // Optional profile image URL
  role                 String // 'admin' | 'surveyor' | 'client'
  status               String  @default("pending") // 'pending' | 'approved' | 'rejected'
  iskNumber            String? // Surveyor ISK number (optional)
  idCardUrl            String? // Surveyor ID Card upload (optional)
  certUrl              String? // Surveyor Certificate upload (optional)
  otp                  String? // Email OTP (optional)
  paid                 Boolean @default(false) // For surveyor access

  // Relations
  bookings         Booking[] // Client bookings
  surveyorBookings Booking[] @relation("SurveyorBookings") // Bookings assigned to surveyors
}

// ===========================
// Booking Model
// ===========================
model Booking {
  id            Int      @id @default(autoincrement())
  location      String
  surveyType    String
  description   String
  preferredDate DateTime
  status        String   @default("Pending")
  createdAt     DateTime @default(now())

  latitude  Float? // Added: Latitude of the location
  longitude Float? // Added: Longitude of the location

  // Relation to client user
  userId Int
  user   User @relation(fields: [userId], references: [id])

  // Optional relation to surveyor user
  assignedSurveyorId Int?
  assignedSurveyor   User? @relation("SurveyorBookings", fields: [assignedSurveyorId], references: [id])
}
